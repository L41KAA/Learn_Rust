{"$message_type":"diagnostic","message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/future/mod.rs","byte_start":40535,"byte_end":40536,"line_start":1084,"line_end":1084,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"    fn future_from(T) -> Self::Future;","highlight_start":20,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(anonymous_parameters)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/future/mod.rs","byte_start":40535,"byte_end":40536,"line_start":1084,"line_end":1084,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"    fn future_from(T) -> Self::Future;","highlight_start":20,"highlight_end":21}],"label":null,"suggested_replacement":"_: T","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/future/mod.rs:1084:20\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1084\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn future_from(T) -> Self::Future;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: T`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(anonymous_parameters)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated method `core::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/future/shared.rs","byte_start":3900,"byte_end":3916,"line_start":131,"line_end":131,"column_start":41,"column_end":57,"is_primary":true,"text":[{"text":"        match self.inner.notifier.state.compare_and_swap(IDLE, POLLING, SeqCst) {","highlight_start":41,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(deprecated)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated method `core::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/future/shared.rs:131:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   match self.inner.notifier.state.compare_and_swap(IDLE, POLLING, Seq\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(deprecated)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated method `core::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/future/shared.rs","byte_start":5176,"byte_end":5192,"line_start":170,"line_end":170,"column_start":49,"column_end":65,"is_primary":true,"text":[{"text":"                match self.inner.notifier.state.compare_and_swap(POLLING, IDLE, SeqCst) {","highlight_start":49,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated method `core::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/future/shared.rs:170:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   match self.inner.notifier.state.compare_and_swap(POLLING, IDLE, Seq\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated method `core::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/atomic_task.rs","byte_start":7809,"byte_end":7825,"line_start":173,"line_end":173,"column_start":26,"column_end":42,"is_primary":true,"text":[{"text":"        match self.state.compare_and_swap(WAITING, REGISTERING, Acquire) {","highlight_start":26,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated method `core::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/atomic_task.rs:173:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match self.state.compare_and_swap(WAITING, REGISTERING, Acquire) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated method `core::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs","byte_start":14755,"byte_end":14771,"line_start":492,"line_end":492,"column_start":26,"column_end":42,"is_primary":true,"text":[{"text":"        match self.state.compare_and_swap(NOTIFY, IDLE, Ordering::SeqCst) {","highlight_start":26,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated method `core::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs:492:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m492\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match self.state.compare_and_swap(NOTIFY, IDLE, Ordering::SeqCst) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated method `core::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs","byte_start":15130,"byte_end":15146,"line_start":503,"line_end":503,"column_start":26,"column_end":42,"is_primary":true,"text":[{"text":"        match self.state.compare_and_swap(IDLE, SLEEP, Ordering::SeqCst) {","highlight_start":26,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated method `core::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs:503:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m503\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match self.state.compare_and_swap(IDLE, SLEEP, Ordering::SeqCst) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated method `core::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs","byte_start":15668,"byte_end":15684,"line_start":519,"line_end":519,"column_start":37,"column_end":53,"is_primary":true,"text":[{"text":"            if NOTIFY == self.state.compare_and_swap(NOTIFY, IDLE, Ordering::SeqCst) {","highlight_start":37,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated method `core::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs:519:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m519\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   if NOTIFY == self.state.compare_and_swap(NOTIFY, IDLE, Ordering::Se\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated method `core::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs","byte_start":15972,"byte_end":15988,"line_start":530,"line_end":530,"column_start":26,"column_end":42,"is_primary":true,"text":[{"text":"        match self.state.compare_and_swap(IDLE, NOTIFY, Ordering::SeqCst) {","highlight_start":26,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated method `core::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs:530:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m530\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match self.state.compare_and_swap(IDLE, NOTIFY, Ordering::SeqCst) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated method `core::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs","byte_start":16302,"byte_end":16318,"line_start":540,"line_end":540,"column_start":26,"column_end":42,"is_primary":true,"text":[{"text":"        match self.state.compare_and_swap(SLEEP, NOTIFY, Ordering::SeqCst) {","highlight_start":26,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated method `core::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs:540:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m540\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match self.state.compare_and_swap(SLEEP, NOTIFY, Ordering::SeqCst) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated method `core::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/sync/mpsc/mod.rs","byte_start":25248,"byte_end":25264,"line_start":757,"line_end":757,"column_start":49,"column_end":65,"is_primary":true,"text":[{"text":"            let actual = self.inner.num_senders.compare_and_swap(curr, next, SeqCst);","highlight_start":49,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated method `core::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/sync/mpsc/mod.rs:757:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m757\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let actual = self.inner.num_senders.compare_and_swap(curr, next, Se\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"trait `AssertSend` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/mod.rs","byte_start":2985,"byte_end":2995,"line_start":92,"line_end":92,"column_start":7,"column_end":17,"is_primary":true,"text":[{"text":"trait AssertSend: Send {}","highlight_start":7,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `AssertSend` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/mod.rs:92:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mtrait AssertSend: Send {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"trait `AssertSync` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/atomic_task.rs","byte_start":6439,"byte_end":6449,"line_start":141,"line_end":141,"column_start":15,"column_end":25,"is_primary":true,"text":[{"text":"        trait AssertSync: Sync {}","highlight_start":15,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `AssertSync` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/atomic_task.rs:141:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        trait AssertSync: Sync {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"trait `AssertKinds` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/sync/mpsc/mod.rs","byte_start":4838,"byte_end":4849,"line_start":113,"line_end":113,"column_start":7,"column_end":18,"is_primary":true,"text":[{"text":"trait AssertKinds: Send + Sync + Clone {}","highlight_start":7,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `AssertKinds` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/sync/mpsc/mod.rs:113:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mtrait AssertKinds: Send + Sync + Clone {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"calls to `std::mem::drop` with a value that implements `Copy` does nothing","code":{"code":"dropping_copy_types","explanation":null},"level":"warning","spans":[{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/mod.rs","byte_start":19087,"byte_end":19089,"line_start":478,"line_end":478,"column_start":14,"column_end":16,"is_primary":false,"text":[{"text":"        drop(id);","highlight_start":14,"highlight_end":16}],"label":"argument has type `usize`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/mod.rs","byte_start":19082,"byte_end":19090,"line_start":478,"line_end":478,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"        drop(id);","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use `let _ = ...` to ignore the expression or result","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(dropping_copy_types)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: calls to `std::mem::drop` with a value that implements `Copy` does nothing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/mod.rs:478:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m478\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        drop(id);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12margument has type `usize`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: use `let _ = ...` to ignore the expression or result\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dropping_copy_types)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous wide pointer comparison, the comparison includes metadata which may not be expected","code":{"code":"ambiguous_wide_pointer_comparisons","explanation":null},"level":"warning","spans":[{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/core.rs","byte_start":1546,"byte_end":1584,"line_start":71,"line_end":71,"column_start":32,"column_end":70,"is_primary":true,"text":[{"text":"        self.id == other.id && self.handle.inner == (other.f)().inner","highlight_start":32,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(ambiguous_wide_pointer_comparisons)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `std::ptr::addr_eq` or untyped pointers to only compare their addresses","code":null,"level":"help","spans":[{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/core.rs","byte_start":1546,"byte_end":1546,"line_start":71,"line_end":71,"column_start":32,"column_end":32,"is_primary":true,"text":[{"text":"        self.id == other.id && self.handle.inner == (other.f)().inner","highlight_start":32,"highlight_end":32}],"label":null,"suggested_replacement":"std::ptr::addr_eq(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/core.rs","byte_start":1563,"byte_end":1567,"line_start":71,"line_end":71,"column_start":49,"column_end":53,"is_primary":true,"text":[{"text":"        self.id == other.id && self.handle.inner == (other.f)().inner","highlight_start":49,"highlight_end":53}],"label":null,"suggested_replacement":", ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/core.rs","byte_start":1584,"byte_end":1584,"line_start":71,"line_end":71,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"        self.id == other.id && self.handle.inner == (other.f)().inner","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/core.rs:71:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.id == other.id && self.handle.inner == (other.f)().inner\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(ambiguous_wide_pointer_comparisons)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        self.id == other.id && \u001b[0m\u001b[0m\u001b[38;5;10mstd::ptr::addr_eq(\u001b[0m\u001b[0mself.handle.inner\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m(other.f)().inner\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m~\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous wide pointer comparison, the comparison includes metadata which may not be expected","code":{"code":"ambiguous_wide_pointer_comparisons","explanation":null},"level":"warning","spans":[{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs","byte_start":5454,"byte_end":5506,"line_start":211,"line_end":211,"column_start":17,"column_end":69,"is_primary":true,"text":[{"text":"                &**old1 as *const Unpark == &**old2 as *const Unpark","highlight_start":17,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use `std::ptr::addr_eq` or untyped pointers to only compare their addresses","code":null,"level":"help","spans":[{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs","byte_start":5454,"byte_end":5454,"line_start":211,"line_end":211,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"                &**old1 as *const Unpark == &**old2 as *const Unpark","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"std::ptr::addr_eq(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs","byte_start":5478,"byte_end":5482,"line_start":211,"line_end":211,"column_start":41,"column_end":45,"is_primary":true,"text":[{"text":"                &**old1 as *const Unpark == &**old2 as *const Unpark","highlight_start":41,"highlight_end":45}],"label":null,"suggested_replacement":", ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs","byte_start":5506,"byte_end":5506,"line_start":211,"line_end":211,"column_start":69,"column_end":69,"is_primary":true,"text":[{"text":"                &**old1 as *const Unpark == &**old2 as *const Unpark","highlight_start":69,"highlight_end":69}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/kali/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs:211:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                &**old1 as *const Unpark == &**old2 as *const Unpark\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10mstd::ptr::addr_eq(\u001b[0m\u001b[0m&**old1 as *const Unpark\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&**old2 as *const Unpark\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[38;5;10m~\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"16 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 16 warnings emitted\u001b[0m\n\n"}
